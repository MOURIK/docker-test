#
# DevOps Playground
# =================
#
# What you get:
#
# Gitlab (Git Server)
#
#   - Docker Hub: https://hub.docker.com/r/gitlab/gitlab-ce/
#   - Documentation: https://about.gitlab.com/installation/
#
# Jenkins (CI)
#
#   - Docker Hub: https://hub.docker.com/_/jenkins/
#   - Documentation: https://jenkins.io/doc/
#
# Drone (CI)
#
#   - Docker Hub: https://hub.docker.com/r/drone/drone/
#   - Documentation: http://readme.drone.io/
#
# GoCD (CI)
#
#   - Docker Hub: https://hub.docker.com/r/gocd/gocd-server/
#   - Documentation: https://docs.gocd.org/current/
#
# Nexus (Registry)
#
#   - Docker Hub: https://hub.docker.com/r/sonatype/nexus/
#   - Documentation: https://books.sonatype.com/nexus-book/reference/
#
# Registry (Docker Registry)
#
#   - Docker Hub: https://hub.docker.com/_/registry/
#   - Documentation: https://docs.docker.com/registry/
#
# Consul (Service Discovery & Central Configuration)
#
#   - Docker Hub: https://hub.docker.com/_/consul/
#   - Documentation: https://www.consul.io/docs/index.html
#
# Vault (Secret Management)
#
#   - Docker Hub: https://hub.docker.com/_/vault/
#   - Documentation: https://www.vaultproject.io/docs/index.html
#
# ------
#
# Ports for WebGUI's:
#
# Jenkins: 8080
# Gitlab: 4000
# GoCD: 8153
# Consul: 8500
# Vault: 8700
#
version: '3'

services:

  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-data:/var/opt/gitlab
      - gitlab-log:/var/log/gitlab
    ports:
      - 4000:80
    networks:
      - devops

  jenkins:
    image: jenkins:latest
    container_name: jenkins
    volumes:
      - jenkins-data:/var/jenkins_home
    ports:
      - 8080:8080
      - 50000:50000
    networks:
      - devops

  # drone:
  #   image: drone/drone:latest
  #   container_name: drone
  #   volumes:
  #     - drone-data:/var/lib/drone/
  #   ports:
  #     - 8000:8000
  #   networks:
  #     - devops

  # gocd:
  #   image: gocd/gocd-server:v17.5.0
  #   container_name: gocd
  #   volumes:
  #     - gocd-data:/godata
  #   ports:
  #     - 8153:8153
  #     - 8154:8154
  #   networks:
  #     - devops

  nexus:
    image: sonatype/nexus:latest
    container_name: nexus
    volumes:
      - nexus-data:/opt/sonatype/nexus
    ports:
      - 8081:8081
    networks:
      - devops

  registry:
    image: registry:latest
    container_name: registry
    volumes:
      - registry-data:/var/lib/registry
      - registry-config:/etc/docker/registry/
    ports:
      - 5000:5000
    networks:
      - devops

  sonarqube:
    image: sonarqube:lts
    container_name: sonarqube    
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    ports:
      - 9000:9000
      - 9092:9092
    networks:
      - devops
      - sonarnet

  db:
    image: postgres:9
    container_name: postgres 
    networks:
      - sonarnet
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgresql:/var/lib/postgresql
      # This needs explicit mapping due to https://github.com/docker-library/postgres/blob/4e48e3228a30763913ece952c611e5e9b95c8759/Dockerfile.template#L52
      - postgresql_data:/var/lib/postgresql/data

  # consul:
  #   image: consul:latest
  #   container_name: consul
  #   volumes:
  #     - consul-data:/consul/data
  #       # - consul-config:/consul/config
  #   ports:
  #     - 8300:8300/tcp
  #     - 8301:8301/tcp
  #     - 8301:8301/udp
  #     - 8302:8302/tcp
  #     - 8302:8302/udp
  #     - 8400:8400/tcp
  #     - 8500:8500/tcp
  #     - 8600:8600/tcp
  #     - 8600:8600/udp
  #   networks:
  #     - devops

  # vault:
  #   image: vault:latest
  #   container_name: vault
  #   volumes:
  #     - vault-data:/vault/file
  #     - vault-logs:/vault/logs
  #   environment:
  #     - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8700
  #   ports:
  #     - 8700:8700
  #   networks:
  #     - devops



  rabbitmq:
    image: "rabbitmq:3-management"
    hostname: "rabbitmq"
    container_name: rabbitmq
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - 15672:15672
      - 5672:5672
    labels:
      NAME: "rabbitmq1"
    volumes:
      - rabbit-config:/etc/rabbitmq/
    networks:
      - backend

  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.3
    container_name: elasticsearch1
    environment:
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - backend

  kibana:
    image: docker.elastic.co/kibana/kibana:5.6.3
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - 5601:5601
    networks:
      - backend
    depends_on:
      - elasticsearch1

networks:
  devops:
    driver: bridge
  backend:
    driver: bridge
  sonarnet:
    driver: bridge

volumes:
  gitlab-config:
  gitlab-data:
  gitlab-log:
  jenkins-data:
  nexus-data:
  registry-data:
  registry-config:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_bundled-plugins:
  postgresql:
  postgresql_data:
#  drone-data:
#  gocd-data:
#  vault-data:
#  vault-logs:
#  consul-data:
# consul-config:
  rabbit-config:
  esdata1: